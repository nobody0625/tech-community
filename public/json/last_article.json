[
  {
    "id": 1,
    "articleId": 3, 
    "img":"public/images/article/articleImg1.png",
    "title": "TypeScript基础：generics 泛型",
    "desciption": "TypeScript泛型通过类型参数实现灵活复用，支持约束（extends）、推断（上下文/默认）、条件类型（infer）及工具类型（Partial/Pick/Record等），确保类型安全与代码扩展性。",
    "author": "nobody0607",
    "date": "2025-06-15",
    "content": "## \u6CDB\u578B \\<T>\r\n\r\n### \u6CDB\u578B\u5B9A\u4E49\r\n\r\n\u6CDB\u578B\uFF08Generics\uFF09\u662F\u4E00\u79CD\u7F16\u7A0B\u8BED\u8A00\u7279\u6027\uFF0C\u5141\u8BB8\u5728\u5B9A\u4E49\u51FD\u6570\u3001\u7C7B\u3001\u63A5\u53E3\u7B49\u65F6\u4F7F\u7528\u5360\u4F4D\u7B26\u6765\u8868\u793A\u7C7B\u578B\uFF0C\u800C\u4E0D\u662F\u5177\u4F53\u7684\u7C7B\u578B\uFF0C\u7B49\u5230\u4F7F\u7528\u65F6\u518D\u6307\u5B9A\u7C7B\u578B\u4EE5\u5B9E\u73B0\u7075\u6D3B\u7684\u7C7B\u578B\u68C0\u67E5\r\n\r\n```ts\r\n\/\/ 1. \u6CDB\u578B\u51FD\u6570\r\nfunction print(arg: string): string {\r\n  return arg;\r\n}\r\nfunction print(arg: number): number {\r\n  return arg;\r\n}\r\n\r\nfunction print<T>(arg: T): T {\r\n  return arg;\r\n}\r\n\r\n\/\/ 2. \u6CDB\u578B\u63A5\u53E3\r\ninterface Pair<T, U> {\r\n  first: T;\r\n  second: U;\r\n}\r\n\r\nlet pair: Pair<string, number> = { first: \"hello\", second: 42 };\r\nconsole.log(pair); \/\/ { first: 'hello', second: 42 }\r\n\r\ninterface IValue {\r\n  <T>(arg: T): T;\r\n}\r\n\r\nlet printFn: IValue = (arg) => arg;\r\n\r\n\/\/ 3. \u6CDB\u578B\u7C7B\r\nclass Box<T> {\r\n  private value: T;\r\n\r\n  constructor(value: T) {\r\n    this.value = value;\r\n  }\r\n\r\n  getValue(): T {\r\n    return this.value;\r\n  }\r\n}\r\n\r\nlet stringBox = new Box<string>(\"TypeScript\");\r\nconsole.log(stringBox.getValue()); \/\/ TypeScript\r\n```\r\n\r\n### \u6CDB\u578B\u7EA6\u675F extends\r\n\r\n\u7528\u4E8E\u9650\u5236\u6CDB\u578B\u7684\u7C7B\u578B\u8303\u56F4\uFF0C\u5FC5\u987B\u81F3\u5C11\u6EE1\u8DB3\u6761\u4EF6\r\n\r\n```ts\r\ninterface Lengthwise {\r\n  length: number;\r\n}\r\n\r\n\/\/ T \u5FC5\u987B\u5B9E\u73B0 Lengthwise \u63A5\u53E3\r\nfunction logLength<T extends Lengthwise>(arg: T): void {\r\n  console.log(arg.length);\r\n}\r\n\r\nlogLength(\"hello\"); \/\/ 5\r\nlogLength(42); \/\/ Argument of type 'number' is not assignable to parameter of type 'Lengthwise'.\r\n```\r\n\r\n### \u6CDB\u578B\u9ED8\u8BA4\u503C =\r\n\r\n\u5F53 \u200B\u200B \u65E0\u6CD5\u63A8\u65AD\u7C7B\u578B \u200B\u200B \u6216 \u200B\u200B \u672A\u663E\u5F0F\u6307\u5B9A\u7C7B\u578B \u200B\u200B \u65F6\uFF0CT \u4E3A\u9ED8\u8BA4\u7C7B\u578B\r\n\r\n\u6CDB\u578B\u9ED8\u8BA4\u503C\u662F\u4E00\u4E2A \u200B\u200B \u540E\u5907\u673A\u5236 \u200B\u200B\uFF0C\u4E0D\u662F\u5F3A\u5236\u7EA6\u675F\r\n\r\n```ts\r\nfunction defaultValue<T = string>(arg: T): T {\r\n  return arg;\r\n}\r\n\r\nlet result1 = defaultValue(\"hello\"); \/\/ \u63A8\u65AD\u4E3A string \u7C7B\u578B\r\nlet result2 = defaultValue(42); \/\/ \u63A8\u65AD\u4E3A number \u7C7B\u578B\r\n```\r\n\r\n## \u6CDB\u578B\u63A8\u65AD\r\n\r\n### \u4E00\u822C\u63A8\u65AD\u987A\u5E8F\r\n\r\n\u6CDB\u578B\u7684\u7C7B\u578B\u63A8\u65AD\u9075\u5FAA\u4EE5\u4E0B\u987A\u5E8F:\r\n\r\n\u663E\u5F0F\u6307\u5B9A\u7C7B\u578B > \u4E0A\u4E0B\u6587\u63A8\u65AD\uFF08\u4F8B\u5982\uFF1A\u4F20\u5165\u7684\u53C2\u6570\u7684\u7C7B\u578B\uFF09> \u9ED8\u8BA4\u7C7B\u578B\r\n\r\n### \u6761\u4EF6\u7C7B\u578B\r\n\r\n\u6761\u4EF6\u7C7B\u578B\u7684\u4E00\u822C\u6027\u8868\u8FBE\u5F0F\uFF1A`SomeType` extends `OtherType` ? `TrueType` : `FalseType`;\r\n\r\n\u542B\u4E49\uFF1A\u5F53 extends \u5DE6\u8FB9\u7684\u7C7B\u578B\u53EF\u4EE5\u8D4B\u503C\u7ED9\u53F3\u8FB9\u7684\u7C7B\u578B\uFF08\u5DE6\u8FB9\u7684\u7C7B\u578B\u662F\u53F3\u8FB9\u7C7B\u578B\u7684\u5B50\u7C7B\u578B\uFF09\u65F6\uFF0C\u8868\u8FBE\u5F0F\u7684\u503C\u4E3A `TrueType`\uFF0C\u5426\u5219\u4E3A `FalseType`\r\n\r\n```ts\r\ninterface Father {\r\n  blood: \"0\";\r\n}\r\n\r\ninterface Mather {\r\n  blood: \"X\";\r\n}\r\n\r\ntype Son<T> = T extends Father ? Father : Mather;\r\n\r\ntype boy = Son<{}>; \/\/ Mather\r\ntype girl = Son<{ blood: \"0\" }>; \/\/ Father\r\n```\r\n\r\n### infer \u63A8\u65AD\r\n\r\n`infer` \u5173\u952E\u5B57\u4EE5\u58F0\u660E\u65B9\u5F0F\u5F15\u5165\u4E00\u4E2A\u65B0\u6CDB\u578B\u7C7B\u578B\u53D8\u91CF\uFF0C\u8FD9\u4E2A\u53D8\u91CF\u7684\u503C\u53D6\u51B3\u4E8E\u4F20\u5165\u7684\u6CDB\u578B T\r\n\r\n```ts\r\n\/\/ \u4F8B1\r\ntype Foo<T> = T extends { t: infer Test } ? Test : string;\r\n\r\ntype One = Foo<number>; \/\/ string\r\ntype Two = Foo<{ t: boolean }>; \/\/ boolean\r\ntype Three = Foo<{ a: number; t: () => void }>; \/\/ () => void\r\n\r\n\/\/ \u4F8B2\r\ninterface Customer {\r\n  name: string;\r\n  moneyPaid: number;\r\n}\r\n\r\ntype custFuncType = (cust: Customer) => string;\r\n\r\ntype inferType<T> = T extends (params: infer P) => any ? P : T;\r\n\r\ntype inferResultType = inferType<custFuncType>; \/\/ Customer\r\n```\r\n\r\n> \u65B0\u6CDB\u578B\u7C7B\u578B\u53D8\u91CF\u53EA\u80FD\u5728 true \u7684\u5206\u652F\u53EF\u4EE5\u4F7F\u7528\r\n\r\n## \u6CDB\u578B\u5DE5\u5177\u4E0E\u624B\u5199\u5B9E\u73B0\r\n\r\n### Partial\\<T>\r\n\r\n\u4F5C\u7528\uFF1A\u5C06\u5BF9\u8C61\u7C7B\u578B\u7684\u5168\u90E8\u5C5E\u6027\u53D8\u6210\u53EF\u9009\r\n\r\n```ts\r\ntype Animal = {\r\n  name: string;\r\n  age: number;\r\n  eat: () => number;\r\n};\r\n\r\n\/\/\u628A\u5BF9\u8C61\u7C7B\u578B\u7684\u5168\u90E8\u5C5E\u6027\u53D8\u6210\u53EF\u9009\r\ntype PartialAnimal = Partial<Animal>;\r\n\r\n\/\/ \u5B9E\u73B0Partial\r\ntype MyPartial<T> = {\r\n  [P in keyof T]?: T[P];\r\n};\r\n```\r\n\r\n### Required\\<T>\r\n\r\n\u4F5C\u7528\uFF1A\u5C06\u5BF9\u8C61\u7684\u5168\u90E8\u5C5E\u6027\u53D8\u6210\u5FC5\u9009\r\n\r\n```ts\r\ntype Animal = {\r\n  name?: string;\r\n  age: number;\r\n  eat?: () => number;\r\n};\r\n\r\n\/\/\u628A\u5BF9\u8C61\u7684\u5168\u90E8\u5C5E\u6027\u53D8\u6210\u5FC5\u9009\r\ntype RequiredAnimal = Required<Animal>;\r\n\r\n\/\/ \u5B9E\u73B0Required\r\ntype MyRequired<T> = { [P in keyof T]-?: T[P] }; \/\/ - \u4E3A\u53BB\u9664\uFF0C -? \u5373\u53BB\u9664\u53EF\u9009\r\n```\r\n\r\n### Record\\<K,T>\r\n\r\n\u4F5C\u7528\uFF1A\r\n\r\n- \u58F0\u660E\u4E00\u4E2A\u5BF9\u8C61\u7684 key \u548C value \u7C7B\u578B\r\n- \u5C06\u4E00\u4E2A\u8054\u5408\u7C7B\u578B\u7684\u503C\u6620\u5C04\u5230\u53E6\u4E00\u4E2A\u7C7B\u578B\u4E0A\r\n\r\n```ts\r\n\/\/ \u58F0\u660E\u4E00\u4E2A\u5BF9\u8C61\u7684key\u548Cvalue\u7C7B\u578B\r\nconst obj: Record<string, string> = {\r\n  name: \"zhangsan\",\r\n  tag: \"\u6253\u5DE5\u4EBA\",\r\n  data: \"str\",\r\n};\r\n\r\n\/\/ \u5C06\u4E00\u4E2A\u8054\u5408\u7C7B\u578B\u7684\u503C\u6620\u5C04\u5230\u53E6\u4E00\u4E2A\u7C7B\u578B\u4E0A\r\ntype Animal = \"dog\" | \"cat\" | \"fish\";\r\n\r\ntype AnimalInfo = Record<Animal, { name: string; age: number }>;\r\n\r\nconst animals: AnimalInfo = {\r\n  dog: { name: \"dogName\", age: 2 },\r\n  cat: { name: \"catName\", age: 3 },\r\n  fish: { name: \"fishName\", age: 5 },\r\n};\r\n\r\n\/\/ \u5B9E\u73B0Record\r\ntype MyRecord<K extends keyof any, T> = {\r\n  [key in K]: T;\r\n};\r\n```\r\n\r\n### Pick\\<T,K>\r\n\r\n\u4F5C\u7528\uFF1A\u5C06\u5BF9\u8C61\u7C7B\u578B\u4E2D\u5BF9\u5E94\u952E\u7684\u7C7B\u578B\u63D0\u53D6\u51FA\u6765\r\n\r\n```ts\r\nconst bird: Pick<Animal, \"name\" | \"age\"> = { name: \"bird\", age: 1 };\r\n\r\n\/\/ \u6D4B\u8BD5\u4FE1\u606F\u7C7B\u578B\r\ninterface User {\r\n  account: string;\r\n  avatar: string;\r\n  id: string;\r\n  mobile: string;\r\n  token: string;\r\n}\r\n\r\n\/\/ \u4F7F\u7528Pick\u6CDB\u578B\u5DE5\u5177\uFF1A \u62BD\u53D6 id \u548C token\r\ntype PickUserTest = Pick<User, \"id\" | \"token\" | \"account\">;\r\n\r\n\/\/ \u5B9E\u73B0Pick\r\ntype MyPick<T, K extends keyof T> = {\r\n  [P in K]: T[P];\r\n};\r\n```\r\n\r\n### Omit\\<T,K>\r\n\r\n\u4F5C\u7528\uFF1A\u4ECE\u5BF9\u8C61\u7C7B\u578B\u4E2D\u6392\u51FA\u6307\u5B9A\u7684\u5C5E\u6027\u7C7B\u578B\uFF0C\u5F97\u5230\u5269\u4F59\u7684\u5C5E\u6027\u7C7B\u578B\r\n\r\n```ts\r\ntype Animal = {\r\n  name: string;\r\n  age: number;\r\n  eat: () => void;\r\n};\r\n\r\n\/\/ \u53BB\u9664\u5BF9\u8C61\u7C7B\u578BT\u4E2D\u5305\u542BK \u7684\u952E\u503C\u5BF9\r\nconst OmitAnimal: Omit<Animal, \"name\" | \"age\"> = {\r\n  eat: () => {\r\n    console.log(\"eat\");\r\n  },\r\n};\r\n\r\ninterface User {\r\n  account: string;\r\n  avatar: string;\r\n  id: string;\r\n  mobile: string;\r\n  token: string;\r\n}\r\n\r\ntype OmitUserTest = Omit<User, \"token\" | \"mobile\">;\r\n```\r\n\r\n### ReturnType\\<T>\r\n\r\n\u4F5C\u7528\uFF1A\u83B7\u53D6\u51FD\u6570\u8FD4\u56DE\u7684\u7C7B\u578B\r\n\r\n```ts\r\nfunction foo(x: string | number) {\r\n  return x;\r\n}\r\n\r\n\/\/ \u83B7\u53D6\u51FD\u6570\u8FD4\u56DE\u7684\u7C7B\u578B\r\ntype FooType = ReturnType<typeof foo>; \/\/ string | number\r\n\r\n\/\/ \u5B9E\u73B0ReturnType\r\ntype MyReturnType<T extends (...args: any) => any> = T extends (\r\n  ...args: any\r\n) => infer R\r\n  ? R\r\n  : any;\r\n```\r\n\r\n## \u4F8B\u9898\r\n\r\n1. \u51FD\u6570\u58F0\u660E\u7684\u8FD4\u56DE\u503C\u7C7B\u578B\u4E0E\u5B9E\u73B0\u7684\u8FD4\u56DE\u503C\u7C7B\u578B\u4E0D\u4E00\u81F4\r\n\r\n```ts\r\ntype User = {\r\n  id: number;\r\n  kind: string;\r\n};\r\nfunction makeCustomer<T extends User>(u: T): T {\r\n  return {\r\n    \/\/ return \u62A5\u9519\r\n    id: u.id,\r\n    kind: \"customer\",\r\n  };\r\n}\r\n\r\nmakeCustomer({ id: 1, kind: \"adin\", name: \"jack\" });\r\n\r\n\/\/ Type '{ id: number; kind: string; name: string; }' is not assignable to type 'T'.\r\n\/\/  'T' could be instantiated with an arbitrary type which could be unrelated to '{ id: number; kind: string; name: string; }'.\r\n```\r\n\r\n\u6CDB\u578B T \u662F User \u7684\u5B50\u7C7B\uFF0C\u5B83\u81F3\u5C11\u5305\u542B\u6210\u5458 id \u548C kind\uFF0C\u800C\u51FD\u6570\u5B9E\u73B0\u7684\u8FD4\u56DE\u503C\u7C7B\u578B\u4E3A { id: number, kind: string }\uFF0C\u4E24\u8005\u5E76\u4E0D\u5339\u914D\u3002return\u5904\u7684\u62A5\u9519\u4E0E\u540E\u7EED\u7684\u51FD\u6570\u8C03\u7528\u65E0\u5173\uFF0C\u5373\u4F7F\u5C06\u51FD\u6570\u8C03\u7528\u6CE8\u91CA\u6389\u4E5F\u4E0D\u4F1A\u6539\u53D8\u62A5\u9519\u63D0\u793A\r\n\r\n```ts\r\n\/\/\u6CD5\u4E00\uFF1A\u4F7F\u7528\u5C55\u5F00\u8FD0\u7B97\u7B26...\u786E\u4FDD\u7C7B\u578B\u5339\u914D\r\ntype User = {\r\n  id: number;\r\n  kind: string;\r\n};\r\nfunction makeCustomer<T extends User>(u: T): T {\r\n  return {\r\n    ...u,\r\n  };\r\n}\r\n\r\n\/\/\u6CD5\u4E8C\uFF1A\u4F7F\u7528\u7C7B\u578B\u65AD\u8A00\u5F3A\u5236\u7C7B\u578B\u4E00\u81F4\r\ntype User = {\r\n  id: number;\r\n  kind: string;\r\n};\r\nfunction makeCustomer<T extends User>(u: T): T {\r\n  return {\r\n    id: u.id,\r\n    kind: \"customer\",\r\n  } as T;\r\n}\r\n```"
  },
  {
    "id": 2,
    "articleId": 4, 
    "img":"public/images/article/articleImg1.png",
    "title": "generics 泛型",
    "desciption": "TypeScript泛型通过类型参数实现灵活复用，支持约束（extends）、推断（上下文/默认）、条件类型（infer）及工具类型（Partial/Pick/Record等），确保类型安全与代码扩展性。",
    "author": "nobody0607",
    "date": "2025-06-15",
    "content": "## \u6CDB\u578B \\<T>\r\n\r\n### \u6CDB\u578B\u5B9A\u4E49\r\n\r\n\u6CDB\u578B\uFF08Generics\uFF09\u662F\u4E00\u79CD\u7F16\u7A0B\u8BED\u8A00\u7279\u6027\uFF0C\u5141\u8BB8\u5728\u5B9A\u4E49\u51FD\u6570\u3001\u7C7B\u3001\u63A5\u53E3\u7B49\u65F6\u4F7F\u7528\u5360\u4F4D\u7B26\u6765\u8868\u793A\u7C7B\u578B\uFF0C\u800C\u4E0D\u662F\u5177\u4F53\u7684\u7C7B\u578B\uFF0C\u7B49\u5230\u4F7F\u7528\u65F6\u518D\u6307\u5B9A\u7C7B\u578B\u4EE5\u5B9E\u73B0\u7075\u6D3B\u7684\u7C7B\u578B\u68C0\u67E5\r\n\r\n```ts\r\n\/\/ 1. \u6CDB\u578B\u51FD\u6570\r\nfunction print(arg: string): string {\r\n  return arg;\r\n}\r\nfunction print(arg: number): number {\r\n  return arg;\r\n}\r\n\r\nfunction print<T>(arg: T): T {\r\n  return arg;\r\n}\r\n\r\n\/\/ 2. \u6CDB\u578B\u63A5\u53E3\r\ninterface Pair<T, U> {\r\n  first: T;\r\n  second: U;\r\n}\r\n\r\nlet pair: Pair<string, number> = { first: \"hello\", second: 42 };\r\nconsole.log(pair); \/\/ { first: 'hello', second: 42 }\r\n\r\ninterface IValue {\r\n  <T>(arg: T): T;\r\n}\r\n\r\nlet printFn: IValue = (arg) => arg;\r\n\r\n\/\/ 3. \u6CDB\u578B\u7C7B\r\nclass Box<T> {\r\n  private value: T;\r\n\r\n  constructor(value: T) {\r\n    this.value = value;\r\n  }\r\n\r\n  getValue(): T {\r\n    return this.value;\r\n  }\r\n}\r\n\r\nlet stringBox = new Box<string>(\"TypeScript\");\r\nconsole.log(stringBox.getValue()); \/\/ TypeScript\r\n```\r\n\r\n### \u6CDB\u578B\u7EA6\u675F extends\r\n\r\n\u7528\u4E8E\u9650\u5236\u6CDB\u578B\u7684\u7C7B\u578B\u8303\u56F4\uFF0C\u5FC5\u987B\u81F3\u5C11\u6EE1\u8DB3\u6761\u4EF6\r\n\r\n```ts\r\ninterface Lengthwise {\r\n  length: number;\r\n}\r\n\r\n\/\/ T \u5FC5\u987B\u5B9E\u73B0 Lengthwise \u63A5\u53E3\r\nfunction logLength<T extends Lengthwise>(arg: T): void {\r\n  console.log(arg.length);\r\n}\r\n\r\nlogLength(\"hello\"); \/\/ 5\r\nlogLength(42); \/\/ Argument of type 'number' is not assignable to parameter of type 'Lengthwise'.\r\n```\r\n\r\n### \u6CDB\u578B\u9ED8\u8BA4\u503C =\r\n\r\n\u5F53 \u200B\u200B \u65E0\u6CD5\u63A8\u65AD\u7C7B\u578B \u200B\u200B \u6216 \u200B\u200B \u672A\u663E\u5F0F\u6307\u5B9A\u7C7B\u578B \u200B\u200B \u65F6\uFF0CT \u4E3A\u9ED8\u8BA4\u7C7B\u578B\r\n\r\n\u6CDB\u578B\u9ED8\u8BA4\u503C\u662F\u4E00\u4E2A \u200B\u200B \u540E\u5907\u673A\u5236 \u200B\u200B\uFF0C\u4E0D\u662F\u5F3A\u5236\u7EA6\u675F\r\n\r\n```ts\r\nfunction defaultValue<T = string>(arg: T): T {\r\n  return arg;\r\n}\r\n\r\nlet result1 = defaultValue(\"hello\"); \/\/ \u63A8\u65AD\u4E3A string \u7C7B\u578B\r\nlet result2 = defaultValue(42); \/\/ \u63A8\u65AD\u4E3A number \u7C7B\u578B\r\n```\r\n\r\n## \u6CDB\u578B\u63A8\u65AD\r\n\r\n### \u4E00\u822C\u63A8\u65AD\u987A\u5E8F\r\n\r\n\u6CDB\u578B\u7684\u7C7B\u578B\u63A8\u65AD\u9075\u5FAA\u4EE5\u4E0B\u987A\u5E8F:\r\n\r\n\u663E\u5F0F\u6307\u5B9A\u7C7B\u578B > \u4E0A\u4E0B\u6587\u63A8\u65AD\uFF08\u4F8B\u5982\uFF1A\u4F20\u5165\u7684\u53C2\u6570\u7684\u7C7B\u578B\uFF09> \u9ED8\u8BA4\u7C7B\u578B\r\n\r\n### \u6761\u4EF6\u7C7B\u578B\r\n\r\n\u6761\u4EF6\u7C7B\u578B\u7684\u4E00\u822C\u6027\u8868\u8FBE\u5F0F\uFF1A`SomeType` extends `OtherType` ? `TrueType` : `FalseType`;\r\n\r\n\u542B\u4E49\uFF1A\u5F53 extends \u5DE6\u8FB9\u7684\u7C7B\u578B\u53EF\u4EE5\u8D4B\u503C\u7ED9\u53F3\u8FB9\u7684\u7C7B\u578B\uFF08\u5DE6\u8FB9\u7684\u7C7B\u578B\u662F\u53F3\u8FB9\u7C7B\u578B\u7684\u5B50\u7C7B\u578B\uFF09\u65F6\uFF0C\u8868\u8FBE\u5F0F\u7684\u503C\u4E3A `TrueType`\uFF0C\u5426\u5219\u4E3A `FalseType`\r\n\r\n```ts\r\ninterface Father {\r\n  blood: \"0\";\r\n}\r\n\r\ninterface Mather {\r\n  blood: \"X\";\r\n}\r\n\r\ntype Son<T> = T extends Father ? Father : Mather;\r\n\r\ntype boy = Son<{}>; \/\/ Mather\r\ntype girl = Son<{ blood: \"0\" }>; \/\/ Father\r\n```\r\n\r\n### infer \u63A8\u65AD\r\n\r\n`infer` \u5173\u952E\u5B57\u4EE5\u58F0\u660E\u65B9\u5F0F\u5F15\u5165\u4E00\u4E2A\u65B0\u6CDB\u578B\u7C7B\u578B\u53D8\u91CF\uFF0C\u8FD9\u4E2A\u53D8\u91CF\u7684\u503C\u53D6\u51B3\u4E8E\u4F20\u5165\u7684\u6CDB\u578B T\r\n\r\n```ts\r\n\/\/ \u4F8B1\r\ntype Foo<T> = T extends { t: infer Test } ? Test : string;\r\n\r\ntype One = Foo<number>; \/\/ string\r\ntype Two = Foo<{ t: boolean }>; \/\/ boolean\r\ntype Three = Foo<{ a: number; t: () => void }>; \/\/ () => void\r\n\r\n\/\/ \u4F8B2\r\ninterface Customer {\r\n  name: string;\r\n  moneyPaid: number;\r\n}\r\n\r\ntype custFuncType = (cust: Customer) => string;\r\n\r\ntype inferType<T> = T extends (params: infer P) => any ? P : T;\r\n\r\ntype inferResultType = inferType<custFuncType>; \/\/ Customer\r\n```\r\n\r\n> \u65B0\u6CDB\u578B\u7C7B\u578B\u53D8\u91CF\u53EA\u80FD\u5728 true \u7684\u5206\u652F\u53EF\u4EE5\u4F7F\u7528\r\n\r\n## \u6CDB\u578B\u5DE5\u5177\u4E0E\u624B\u5199\u5B9E\u73B0\r\n\r\n### Partial\\<T>\r\n\r\n\u4F5C\u7528\uFF1A\u5C06\u5BF9\u8C61\u7C7B\u578B\u7684\u5168\u90E8\u5C5E\u6027\u53D8\u6210\u53EF\u9009\r\n\r\n```ts\r\ntype Animal = {\r\n  name: string;\r\n  age: number;\r\n  eat: () => number;\r\n};\r\n\r\n\/\/\u628A\u5BF9\u8C61\u7C7B\u578B\u7684\u5168\u90E8\u5C5E\u6027\u53D8\u6210\u53EF\u9009\r\ntype PartialAnimal = Partial<Animal>;\r\n\r\n\/\/ \u5B9E\u73B0Partial\r\ntype MyPartial<T> = {\r\n  [P in keyof T]?: T[P];\r\n};\r\n```\r\n\r\n### Required\\<T>\r\n\r\n\u4F5C\u7528\uFF1A\u5C06\u5BF9\u8C61\u7684\u5168\u90E8\u5C5E\u6027\u53D8\u6210\u5FC5\u9009\r\n\r\n```ts\r\ntype Animal = {\r\n  name?: string;\r\n  age: number;\r\n  eat?: () => number;\r\n};\r\n\r\n\/\/\u628A\u5BF9\u8C61\u7684\u5168\u90E8\u5C5E\u6027\u53D8\u6210\u5FC5\u9009\r\ntype RequiredAnimal = Required<Animal>;\r\n\r\n\/\/ \u5B9E\u73B0Required\r\ntype MyRequired<T> = { [P in keyof T]-?: T[P] }; \/\/ - \u4E3A\u53BB\u9664\uFF0C -? \u5373\u53BB\u9664\u53EF\u9009\r\n```\r\n\r\n### Record\\<K,T>\r\n\r\n\u4F5C\u7528\uFF1A\r\n\r\n- \u58F0\u660E\u4E00\u4E2A\u5BF9\u8C61\u7684 key \u548C value \u7C7B\u578B\r\n- \u5C06\u4E00\u4E2A\u8054\u5408\u7C7B\u578B\u7684\u503C\u6620\u5C04\u5230\u53E6\u4E00\u4E2A\u7C7B\u578B\u4E0A\r\n\r\n```ts\r\n\/\/ \u58F0\u660E\u4E00\u4E2A\u5BF9\u8C61\u7684key\u548Cvalue\u7C7B\u578B\r\nconst obj: Record<string, string> = {\r\n  name: \"zhangsan\",\r\n  tag: \"\u6253\u5DE5\u4EBA\",\r\n  data: \"str\",\r\n};\r\n\r\n\/\/ \u5C06\u4E00\u4E2A\u8054\u5408\u7C7B\u578B\u7684\u503C\u6620\u5C04\u5230\u53E6\u4E00\u4E2A\u7C7B\u578B\u4E0A\r\ntype Animal = \"dog\" | \"cat\" | \"fish\";\r\n\r\ntype AnimalInfo = Record<Animal, { name: string; age: number }>;\r\n\r\nconst animals: AnimalInfo = {\r\n  dog: { name: \"dogName\", age: 2 },\r\n  cat: { name: \"catName\", age: 3 },\r\n  fish: { name: \"fishName\", age: 5 },\r\n};\r\n\r\n\/\/ \u5B9E\u73B0Record\r\ntype MyRecord<K extends keyof any, T> = {\r\n  [key in K]: T;\r\n};\r\n```\r\n\r\n### Pick\\<T,K>\r\n\r\n\u4F5C\u7528\uFF1A\u5C06\u5BF9\u8C61\u7C7B\u578B\u4E2D\u5BF9\u5E94\u952E\u7684\u7C7B\u578B\u63D0\u53D6\u51FA\u6765\r\n\r\n```ts\r\nconst bird: Pick<Animal, \"name\" | \"age\"> = { name: \"bird\", age: 1 };\r\n\r\n\/\/ \u6D4B\u8BD5\u4FE1\u606F\u7C7B\u578B\r\ninterface User {\r\n  account: string;\r\n  avatar: string;\r\n  id: string;\r\n  mobile: string;\r\n  token: string;\r\n}\r\n\r\n\/\/ \u4F7F\u7528Pick\u6CDB\u578B\u5DE5\u5177\uFF1A \u62BD\u53D6 id \u548C token\r\ntype PickUserTest = Pick<User, \"id\" | \"token\" | \"account\">;\r\n\r\n\/\/ \u5B9E\u73B0Pick\r\ntype MyPick<T, K extends keyof T> = {\r\n  [P in K]: T[P];\r\n};\r\n```\r\n\r\n### Omit\\<T,K>\r\n\r\n\u4F5C\u7528\uFF1A\u4ECE\u5BF9\u8C61\u7C7B\u578B\u4E2D\u6392\u51FA\u6307\u5B9A\u7684\u5C5E\u6027\u7C7B\u578B\uFF0C\u5F97\u5230\u5269\u4F59\u7684\u5C5E\u6027\u7C7B\u578B\r\n\r\n```ts\r\ntype Animal = {\r\n  name: string;\r\n  age: number;\r\n  eat: () => void;\r\n};\r\n\r\n\/\/ \u53BB\u9664\u5BF9\u8C61\u7C7B\u578BT\u4E2D\u5305\u542BK \u7684\u952E\u503C\u5BF9\r\nconst OmitAnimal: Omit<Animal, \"name\" | \"age\"> = {\r\n  eat: () => {\r\n    console.log(\"eat\");\r\n  },\r\n};\r\n\r\ninterface User {\r\n  account: string;\r\n  avatar: string;\r\n  id: string;\r\n  mobile: string;\r\n  token: string;\r\n}\r\n\r\ntype OmitUserTest = Omit<User, \"token\" | \"mobile\">;\r\n```\r\n\r\n### ReturnType\\<T>\r\n\r\n\u4F5C\u7528\uFF1A\u83B7\u53D6\u51FD\u6570\u8FD4\u56DE\u7684\u7C7B\u578B\r\n\r\n```ts\r\nfunction foo(x: string | number) {\r\n  return x;\r\n}\r\n\r\n\/\/ \u83B7\u53D6\u51FD\u6570\u8FD4\u56DE\u7684\u7C7B\u578B\r\ntype FooType = ReturnType<typeof foo>; \/\/ string | number\r\n\r\n\/\/ \u5B9E\u73B0ReturnType\r\ntype MyReturnType<T extends (...args: any) => any> = T extends (\r\n  ...args: any\r\n) => infer R\r\n  ? R\r\n  : any;\r\n```\r\n\r\n## \u4F8B\u9898\r\n\r\n1. \u51FD\u6570\u58F0\u660E\u7684\u8FD4\u56DE\u503C\u7C7B\u578B\u4E0E\u5B9E\u73B0\u7684\u8FD4\u56DE\u503C\u7C7B\u578B\u4E0D\u4E00\u81F4\r\n\r\n```ts\r\ntype User = {\r\n  id: number;\r\n  kind: string;\r\n};\r\nfunction makeCustomer<T extends User>(u: T): T {\r\n  return {\r\n    \/\/ return \u62A5\u9519\r\n    id: u.id,\r\n    kind: \"customer\",\r\n  };\r\n}\r\n\r\nmakeCustomer({ id: 1, kind: \"adin\", name: \"jack\" });\r\n\r\n\/\/ Type '{ id: number; kind: string; name: string; }' is not assignable to type 'T'.\r\n\/\/  'T' could be instantiated with an arbitrary type which could be unrelated to '{ id: number; kind: string; name: string; }'.\r\n```\r\n\r\n\u6CDB\u578B T \u662F User \u7684\u5B50\u7C7B\uFF0C\u5B83\u81F3\u5C11\u5305\u542B\u6210\u5458 id \u548C kind\uFF0C\u800C\u51FD\u6570\u5B9E\u73B0\u7684\u8FD4\u56DE\u503C\u7C7B\u578B\u4E3A { id: number, kind: string }\uFF0C\u4E24\u8005\u5E76\u4E0D\u5339\u914D\u3002return\u5904\u7684\u62A5\u9519\u4E0E\u540E\u7EED\u7684\u51FD\u6570\u8C03\u7528\u65E0\u5173\uFF0C\u5373\u4F7F\u5C06\u51FD\u6570\u8C03\u7528\u6CE8\u91CA\u6389\u4E5F\u4E0D\u4F1A\u6539\u53D8\u62A5\u9519\u63D0\u793A\r\n\r\n```ts\r\n\/\/\u6CD5\u4E00\uFF1A\u4F7F\u7528\u5C55\u5F00\u8FD0\u7B97\u7B26...\u786E\u4FDD\u7C7B\u578B\u5339\u914D\r\ntype User = {\r\n  id: number;\r\n  kind: string;\r\n};\r\nfunction makeCustomer<T extends User>(u: T): T {\r\n  return {\r\n    ...u,\r\n  };\r\n}\r\n\r\n\/\/\u6CD5\u4E8C\uFF1A\u4F7F\u7528\u7C7B\u578B\u65AD\u8A00\u5F3A\u5236\u7C7B\u578B\u4E00\u81F4\r\ntype User = {\r\n  id: number;\r\n  kind: string;\r\n};\r\nfunction makeCustomer<T extends User>(u: T): T {\r\n  return {\r\n    id: u.id,\r\n    kind: \"customer\",\r\n  } as T;\r\n}\r\n```"
  }
  ]